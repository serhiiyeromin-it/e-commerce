

const express = require("express");
const router = express.Router();
const { authMiddleware, verifyAdmin } = require("../middleware/authMiddleware");

const User = require("../models/User");
const Order = require("../models/Order");
const Product = require("../models/Product"); // üîß —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π

const multer = require("multer");
const path = require("path");

// Speicherort und Dateiname f√ºr hochgeladene Bilder
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, "uploads/"); // ‚¨ÖÔ∏è Zielordner im Projektverzeichnis
  },
  filename: function (req, file, cb) {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    const ext = path.extname(file.originalname);
    cb(null, file.fieldname + "-" + uniqueSuffix + ext);
  },
});

const upload = multer({ storage });


// üîê –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router.get("/users", authMiddleware, verifyAdmin, async (req, res) => {
  const users = await User.find().select("-password");
  res.json(users);
});

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete("/users/:id", authMiddleware, verifyAdmin, async (req, res) => {
  await User.findByIdAndDelete(req.params.id);
  res.json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω" });
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
router.get("/orders", authMiddleware, verifyAdmin, async (req, res) => {
  const orders = await Order.find().populate("userId", "email username");
  res.json(orders);
});

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
router.delete("/orders/:id", authMiddleware, verifyAdmin, async (req, res) => {
  await Order.findByIdAndDelete(req.params.id);
  res.json({ message: "–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω" });
});

// ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.put("/user/:id/role", authMiddleware, verifyAdmin, async (req, res) => {
  await User.findByIdAndUpdate(req.params.id, { role: req.body.role });
  res.json({ message: "–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞" });
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
router.get("/products", authMiddleware, verifyAdmin, async (req, res) => {
  const products = await Product.find();
  res.json(products);
});


// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º!)
router.post(
  "/products",
  authMiddleware,
  verifyAdmin,
  upload.single("image"), // ‚¨ÖÔ∏è multer!
  async (req, res) => {
    const { title, description, price } = req.body;
    const image = req.file ? `/uploads/${req.file.filename}` : "";

    const newProduct = new Product({
      title,
      description,
      price,
      image,
    });

    await newProduct.save();
    res.json({ message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω", product: newProduct });
  }
);


// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
router.put("/products/:id", authMiddleware, verifyAdmin, async (req, res) => {
  const { title, description, price, image } = req.body;

  const updatedProduct = await Product.findByIdAndUpdate(
    req.params.id,
    { title, description, price, image },
    { new: true }
  );

  res.json({ message: "–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω", product: updatedProduct });
});

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–±—ã–ª–æ —É —Ç–µ–±—è ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º)
router.delete("/products/:id", authMiddleware, verifyAdmin, async (req, res) => {
  await Product.findByIdAndDelete(req.params.id);
  res.json({ message: "–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω!" });
});

module.exports = router;

